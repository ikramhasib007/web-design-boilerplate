@import "media-queries";

@mixin google-fonts($font) {
  $font: unquote($font);
  @import url(https://fonts.googleapis.com/css?family=#{$font});
}

@mixin font-family($family...) {
	font-family: $family, sans-serif;
}

@mixin fancy-links {
	a {
		text-decoration: none;
	}
}

@mixin apply-to-ie-6 {
	* html {
		@content;
	}
}

@mixin rounded($radius) {
	border-radius: $radius;
}

@mixin box-sizing($sizing, $important: '') {
	@if $important == '' {
		-webkit-box-sizing: $sizing;
				box-sizing: $sizing;
	} @else {
		-webkit-box-sizing: $sizing $important;
				box-sizing: $sizing $important;

	}
}

@mixin box-shadow($shadows...) {
  -webkit-box-shadow: $shadows;
  	 -moz-box-shadow: $shadows;
  	   	  box-shadow: $shadows;
}

@mixin transition($transitions...) {
  -webkit-transition: $transitions;
  	 -moz-transition: $transitions;
 	  -ms-transition: $transitions;
       -o-transition: $transitions;
          transition: $transitions;
}

@mixin transform($transform) {
	-webkit-transform: $transform;
        -ms-transform: $transform;
       -moz-transform: $transform;
    	 -o-transform: $transform;
            transform: $transform;
}

@mixin filter($filter) {
	-webkit-filter: $filter;
		-ms-filter: $filter;
		    filter: $filter;
}

@mixin display-flex($important: '') {
	@if $important == '' {
		display: -webkit-box;
	    display: -moz-box;
	    display: -ms-flexbox;
		display: -webkit-flex;
	    display: flex;
	} @else {
		display: -webkit-box $important;
	    display: -moz-box $important;
	    display: -ms-flexbox $important;
		display: -webkit-flex $important;
	    display: flex $important;
	}
}

@mixin flex-direction-column {
	-webkit-box-orient: vertical;
    -webkit-box-direction: normal;
        -ms-flex-direction: column;
            flex-direction: column;
}

@mixin flex-direction-row {
	-webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
        -ms-flex-direction: row;
            flex-direction: row;
}

@mixin justify-content($param) {
	@if $param == space-between {
		-webkit-box-pack: justify;
       	   -ms-flex-pack: justify;
     	 justify-content: space-between;
	} @else if $param == flex-end {
		-webkit-box-pack: end;
  		   -ms-flex-pack: end;
	     justify-content: flex-end;
	} @else if $param == flex-start {
		-webkit-box-pack: start;
  		   -ms-flex-pack: start;
         justify-content: flex-start;
	} @else if $param == space-around {
		-ms-flex-pack: distribute;
      	justify-content: space-around;
    } @else {
		-webkit-box-pack: $param;
	       -ms-flex-pack: $param;
		-webkit-justify-content: $param;
         justify-content: $param;
	}
	
}

@mixin justify-self($param) {
	justify-self: $param;
}

@mixin flex-wrap($param, $important: '') {
	@if $important == '' {
		-ms-flex-wrap: $param;
	        flex-wrap: $param;
	} @else {
		-ms-flex-wrap: $param $important;
	        flex-wrap: $param $important;
	}
}

@mixin align-items($param) {
	@if $param == flex-start {
		-webkit-box-align: start;
      	   -ms-flex-align: start;
          	  align-items: flex-start;
	} @else if $param == flex-end {
		-webkit-box-align: end;
           -ms-flex-align: end;
              align-items: flex-end;
	} @else {
		-webkit-box-align: $param;
           -ms-flex-align: $param;
              align-items: $param;
	}
}

@mixin align-content($param) {
	@if $param == flex-end {
		-ms-flex-line-pack: end;
        	 align-content: flex-end;
	} @else if $param == flex-start {
    	-ms-flex-line-pack: start;
        	 align-content: flex-start;
 	} @else if $param == space-around {
    	-ms-flex-line-pack: distribute;
        	 align-content: space-around;
 	} @else if $param == space-between {
    	-ms-flex-line-pack: justify;
        	 align-content: space-between;

	} @else {
		-ms-flex-line-pack: $param;
        	 align-content: $param;
	}
}

@mixin order($param) {
	-webkit-box-ordinal-group: $param + 1;
        -ms-flex-order: $param;
            order: $param;
}

@mixin flex($vaules, $important: '') {
	@if $important == '' {
		-webkit-box-flex: unquote(flex-webkit($vaules));
	        -ms-flex: unquote($vaules);
	            flex: unquote($vaules);
	} @else {
		-webkit-box-flex: unquote(flex-webkit($vaules)) $important;
	        -ms-flex: unquote($vaules) $important;
	            flex: unquote($vaules) $important;
	}
}

@mixin flex-two-number($vaules) {
	-webkit-box-flex: unquote(flex-webkit-two-number($vaules));
        -ms-flex: unquote($vaules);
            flex: unquote($vaules);
}

@mixin align-self($param) {
	@if $param == flex-end {
		-ms-flex-item-align: end;
        		 align-self: flex-end;
	} @else if $param == flex-start {
		-ms-flex-item-align: start;
        		 align-self: flex-start;
	} @else {
		-ms-flex-item-align: $param;
	        -ms-grid-row-align: $param;
	        align-self: $param;
	}
}

@mixin flex-basis($param, $important: '') {
	@if $important == '' {
		-ms-flex-preferred-size: $param;
	        flex-basis: $param;
	} @else {
		-ms-flex-preferred-size: $param $important;
	        flex-basis: $param $important;
	}
}

@mixin flex-grow($param) {
	-webkit-box-flex: $param;
   -ms-flex-positive: $param;
           flex-grow: $param;
}

@mixin flex-shrink($param) {
	-ms-flex-negative: $param;
          flex-shrink: $param;
}

@mixin animation($animations...) {
	-webkit-animation: $animations;
            animation: $animations;
}

@mixin background-image-other-property {
	background-clip: content-box;			
	background-position: center;
	background-size: cover;
	background-repeat: no-repeat;
}

@mixin btn($font-weight: bold) {
	@include box-sizing(border-box, !important);
	@include font-family(CircularStd);
	font-weight: $font-weight;
	font-style: normal;
	font-stretch: normal;
	line-height: 1.57;
	letter-spacing: normal;
	font-size: rem(14px);
	outline: none;
	cursor: pointer;
	padding: 0;
	border: none;
}

@mixin btn-primary($radius: 4px, $bg-color: $primary-color, $color: $text-color-white) {
	@include rounded($radius);
	padding: $btn-padding;
	background-color: $bg-color;
	color: $color;
}

@mixin btn-outline($radius: 4px, $bg-color: transparent, $color: $primary-color, $border: 2px solid $primary-color) {
	@include rounded($radius);
	padding: $btn-outline-padding;
	background-color: $bg-color;
	color: $color;
	border: $border;
}

@mixin btn-padding($padding: $btn-padding) {
	padding: $padding !important;
}

@mixin box($radius, $border) {
	@include rounded($radius);
	border: $border;
}

@mixin color($color) {
	color: $color;
}

@mixin warning {
	background-color: $warning-bg-color;
	color: $warning-text-color;
}

@mixin danger {
	background-color: $danger-bg-color;
	color: $danger-text-color;
}

@mixin success {
	background-color: $success-bg-color;
	color: $success-text-color;
}

@mixin large-text {
	font: {
		size: $large-text-size;
		weight: bold;
	}
}